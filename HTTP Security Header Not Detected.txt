HTTP Security Header Not Detected

When the client sends a HTTP request to the web server, the server responds without the appropriate security headers. The following security headers should be considered:

Content Security Policy: This header was designed to allow the web server to inform the client browser about the expected behaviour of the application which allows the browser to enforce security constraints more accurately. More information regarding this header can be found here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP


Strict Transport Security: The Strict Transport Security (HSTS) header is used to force client-side connections to only communicate with the server over a secure connection. This will prevent the client from accessing the web server over HTTP and will also prevent the client from overriding any SSL certificate warnings that could be presented. It is recommended to introduce this header once any SSL/TLS issues have been resolved. Format: Strict-Transport-Security: max-age=31536000;


X Frame Options: This header prevents the website from being embedded within an IFRAME element. HTML includes an element known as <iframe> which is used to embed another document within the current HTML document. This can be used within social engineering attacks as an attacker could manipulate the victim into unknowingly performing actions on the target website. This is known as clickjacking. Format: X-Frame-Options: SAMEORIGIN


X XSS Protection: Modern browsers include a feature to help prevent against reflected cross site scripting attacks. This header can be used to enable or disable this feature. Format: X-XSS-Protection: 1; mode=block


X Content Type Options: This header is used to prevent against an attack called MIME type confusion. Browsers can be tricked into incorrectly deciding the content type of the server response which can allow attackers to execute malicious code on the victim's browser. This header prevents the browser from performing an educated guess. Format: X-Content-Type-Options: nosniff


CORS: The Access Control Origin header is used to determine which websites can access certain resources on the web server. Format: Access-Control-Allow-Origin: https://www.example.com


Implementing these HTTP headers depends on infrastructure of the web server. Typically, these headers can be added within the HTTP server configuration files. They can also be defined within the server-side programming language when the server is sending data.